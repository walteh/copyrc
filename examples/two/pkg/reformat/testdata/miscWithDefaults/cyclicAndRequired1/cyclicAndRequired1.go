// üì¶ originally copied by copyrc
// üîó source: https://raw.githubusercontent.com/omissis/go-jsonschema/442a4c100c62a7d8543d1a7ab7052397057add86/tests/data/miscWithDefaults/cyclicAndRequired1/cyclicAndRequired1.go
// üìù license: MIT
// ‚ÑπÔ∏è see .copyrc.lock for more details

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package testdata

import "encoding/json"
import "fmt"

type Bar struct {
	// RefToFoo corresponds to the JSON schema field "refToFoo".
	RefToFoo *Foo `json:"refToFoo,omitempty" yaml:"refToFoo,omitempty" mapstructure:"refToFoo,omitempty"`
}

type CyclicAndRequired1 struct {
	// A corresponds to the JSON schema field "a".
	A *Foo `json:"a,omitempty" yaml:"a,omitempty" mapstructure:"a,omitempty"`
}

type Foo struct {
	// RefToBar corresponds to the JSON schema field "refToBar".
	RefToBar Bar `json:"refToBar" yaml:"refToBar" mapstructure:"refToBar"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Foo) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["refToBar"]; raw != nil && !ok {
		return fmt.Errorf("field refToBar in Foo: required")
	}
	type Plain Foo
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Foo(plain)
	return nil
}
