// Code generated by mockery v2.51.0. DO NOT EDIT.

package mockery

import (
	mock "github.com/stretchr/testify/mock"
	config "github.com/walteh/copyrc/pkg/config"
)

// MockConfig_config is an autogenerated mock type for the Config type
type MockConfig_config struct {
	mock.Mock
}

type MockConfig_config_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfig_config) EXPECT() *MockConfig_config_Expecter {
	return &MockConfig_config_Expecter{mock: &_m.Mock}
}

// GetCopies provides a mock function with no fields
func (_m *MockConfig_config) GetCopies() []config.Copy {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCopies")
	}

	var r0 []config.Copy
	if rf, ok := ret.Get(0).(func() []config.Copy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]config.Copy)
		}
	}

	return r0
}

// MockConfig_config_GetCopies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCopies'
type MockConfig_config_GetCopies_Call struct {
	*mock.Call
}

// GetCopies is a helper method to define mock.On call
func (_e *MockConfig_config_Expecter) GetCopies() *MockConfig_config_GetCopies_Call {
	return &MockConfig_config_GetCopies_Call{Call: _e.mock.On("GetCopies")}
}

func (_c *MockConfig_config_GetCopies_Call) Run(run func()) *MockConfig_config_GetCopies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_config_GetCopies_Call) Return(_a0 []config.Copy) *MockConfig_config_GetCopies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_config_GetCopies_Call) RunAndReturn(run func() []config.Copy) *MockConfig_config_GetCopies_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositories provides a mock function with no fields
func (_m *MockConfig_config) GetRepositories() []config.RepositoryDefinition {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepositories")
	}

	var r0 []config.RepositoryDefinition
	if rf, ok := ret.Get(0).(func() []config.RepositoryDefinition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]config.RepositoryDefinition)
		}
	}

	return r0
}

// MockConfig_config_GetRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositories'
type MockConfig_config_GetRepositories_Call struct {
	*mock.Call
}

// GetRepositories is a helper method to define mock.On call
func (_e *MockConfig_config_Expecter) GetRepositories() *MockConfig_config_GetRepositories_Call {
	return &MockConfig_config_GetRepositories_Call{Call: _e.mock.On("GetRepositories")}
}

func (_c *MockConfig_config_GetRepositories_Call) Run(run func()) *MockConfig_config_GetRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_config_GetRepositories_Call) Return(_a0 []config.RepositoryDefinition) *MockConfig_config_GetRepositories_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_config_GetRepositories_Call) RunAndReturn(run func() []config.RepositoryDefinition) *MockConfig_config_GetRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with no fields
func (_m *MockConfig_config) Hash() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConfig_config_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockConfig_config_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
func (_e *MockConfig_config_Expecter) Hash() *MockConfig_config_Hash_Call {
	return &MockConfig_config_Hash_Call{Call: _e.mock.On("Hash")}
}

func (_c *MockConfig_config_Hash_Call) Run(run func()) *MockConfig_config_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_config_Hash_Call) Return(_a0 string) *MockConfig_config_Hash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_config_Hash_Call) RunAndReturn(run func() string) *MockConfig_config_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with no fields
func (_m *MockConfig_config) Validate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfig_config_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockConfig_config_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *MockConfig_config_Expecter) Validate() *MockConfig_config_Validate_Call {
	return &MockConfig_config_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *MockConfig_config_Validate_Call) Run(run func()) *MockConfig_config_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_config_Validate_Call) Return(_a0 error) *MockConfig_config_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_config_Validate_Call) RunAndReturn(run func() error) *MockConfig_config_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfig_config creates a new instance of MockConfig_config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfig_config(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfig_config {
	mock := &MockConfig_config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
