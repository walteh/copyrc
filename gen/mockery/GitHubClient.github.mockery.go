// Code generated by mockery v2.51.0. DO NOT EDIT.

package mockery

import (
	context "context"
	io "io"

	github "github.com/google/go-github/v60/github"

	mock "github.com/stretchr/testify/mock"
)

// MockGitHubClient_github is an autogenerated mock type for the GitHubClient type
type MockGitHubClient_github struct {
	mock.Mock
}

type MockGitHubClient_github_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitHubClient_github) EXPECT() *MockGitHubClient_github_Expecter {
	return &MockGitHubClient_github_Expecter{mock: &_m.Mock}
}

// DownloadContents provides a mock function with given fields: ctx, owner, repo, path, opts
func (_m *MockGitHubClient_github) DownloadContents(ctx context.Context, owner string, repo string, path string, opts *github.RepositoryContentGetOptions) (io.ReadCloser, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, path, opts)

	if len(ret) == 0 {
		panic("no return value specified for DownloadContents")
	}

	var r0 io.ReadCloser
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) (io.ReadCloser, *github.Response, error)); ok {
		return rf(ctx, owner, repo, path, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) io.ReadCloser); ok {
		r0 = rf(ctx, owner, repo, path, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.Response); ok {
		r1 = rf(ctx, owner, repo, path, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) error); ok {
		r2 = rf(ctx, owner, repo, path, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGitHubClient_github_DownloadContents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadContents'
type MockGitHubClient_github_DownloadContents_Call struct {
	*mock.Call
}

// DownloadContents is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - path string
//   - opts *github.RepositoryContentGetOptions
func (_e *MockGitHubClient_github_Expecter) DownloadContents(ctx interface{}, owner interface{}, repo interface{}, path interface{}, opts interface{}) *MockGitHubClient_github_DownloadContents_Call {
	return &MockGitHubClient_github_DownloadContents_Call{Call: _e.mock.On("DownloadContents", ctx, owner, repo, path, opts)}
}

func (_c *MockGitHubClient_github_DownloadContents_Call) Run(run func(ctx context.Context, owner string, repo string, path string, opts *github.RepositoryContentGetOptions)) *MockGitHubClient_github_DownloadContents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*github.RepositoryContentGetOptions))
	})
	return _c
}

func (_c *MockGitHubClient_github_DownloadContents_Call) Return(_a0 io.ReadCloser, _a1 *github.Response, _a2 error) *MockGitHubClient_github_DownloadContents_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGitHubClient_github_DownloadContents_Call) RunAndReturn(run func(context.Context, string, string, string, *github.RepositoryContentGetOptions) (io.ReadCloser, *github.Response, error)) *MockGitHubClient_github_DownloadContents_Call {
	_c.Call.Return(run)
	return _c
}

// GetContents provides a mock function with given fields: ctx, owner, repo, path, opts
func (_m *MockGitHubClient_github) GetContents(ctx context.Context, owner string, repo string, path string, opts *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, path, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetContents")
	}

	var r0 *github.RepositoryContent
	var r1 []*github.RepositoryContent
	var r2 *github.Response
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error)); ok {
		return rf(ctx, owner, repo, path, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.RepositoryContent); ok {
		r0 = rf(ctx, owner, repo, path, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) []*github.RepositoryContent); ok {
		r1 = rf(ctx, owner, repo, path, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*github.RepositoryContent)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.Response); ok {
		r2 = rf(ctx, owner, repo, path, opts)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*github.Response)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) error); ok {
		r3 = rf(ctx, owner, repo, path, opts)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockGitHubClient_github_GetContents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContents'
type MockGitHubClient_github_GetContents_Call struct {
	*mock.Call
}

// GetContents is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - path string
//   - opts *github.RepositoryContentGetOptions
func (_e *MockGitHubClient_github_Expecter) GetContents(ctx interface{}, owner interface{}, repo interface{}, path interface{}, opts interface{}) *MockGitHubClient_github_GetContents_Call {
	return &MockGitHubClient_github_GetContents_Call{Call: _e.mock.On("GetContents", ctx, owner, repo, path, opts)}
}

func (_c *MockGitHubClient_github_GetContents_Call) Run(run func(ctx context.Context, owner string, repo string, path string, opts *github.RepositoryContentGetOptions)) *MockGitHubClient_github_GetContents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*github.RepositoryContentGetOptions))
	})
	return _c
}

func (_c *MockGitHubClient_github_GetContents_Call) Return(_a0 *github.RepositoryContent, _a1 []*github.RepositoryContent, _a2 *github.Response, _a3 error) *MockGitHubClient_github_GetContents_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockGitHubClient_github_GetContents_Call) RunAndReturn(run func(context.Context, string, string, string, *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error)) *MockGitHubClient_github_GetContents_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRelease provides a mock function with given fields: ctx, owner, repo
func (_m *MockGitHubClient_github) GetLatestRelease(ctx context.Context, owner string, repo string) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRelease")
	}

	var r0 *github.RepositoryRelease
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*github.RepositoryRelease, *github.Response, error)); ok {
		return rf(ctx, owner, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.RepositoryRelease); ok {
		r0 = rf(ctx, owner, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, repo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, owner, repo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGitHubClient_github_GetLatestRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRelease'
type MockGitHubClient_github_GetLatestRelease_Call struct {
	*mock.Call
}

// GetLatestRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
func (_e *MockGitHubClient_github_Expecter) GetLatestRelease(ctx interface{}, owner interface{}, repo interface{}) *MockGitHubClient_github_GetLatestRelease_Call {
	return &MockGitHubClient_github_GetLatestRelease_Call{Call: _e.mock.On("GetLatestRelease", ctx, owner, repo)}
}

func (_c *MockGitHubClient_github_GetLatestRelease_Call) Run(run func(ctx context.Context, owner string, repo string)) *MockGitHubClient_github_GetLatestRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGitHubClient_github_GetLatestRelease_Call) Return(_a0 *github.RepositoryRelease, _a1 *github.Response, _a2 error) *MockGitHubClient_github_GetLatestRelease_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGitHubClient_github_GetLatestRelease_Call) RunAndReturn(run func(context.Context, string, string) (*github.RepositoryRelease, *github.Response, error)) *MockGitHubClient_github_GetLatestRelease_Call {
	_c.Call.Return(run)
	return _c
}

// GetReleaseByTag provides a mock function with given fields: ctx, owner, repo, tag
func (_m *MockGitHubClient_github) GetReleaseByTag(ctx context.Context, owner string, repo string, tag string) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, tag)

	if len(ret) == 0 {
		panic("no return value specified for GetReleaseByTag")
	}

	var r0 *github.RepositoryRelease
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*github.RepositoryRelease, *github.Response, error)); ok {
		return rf(ctx, owner, repo, tag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.RepositoryRelease); ok {
		r0 = rf(ctx, owner, repo, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, repo, tag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, owner, repo, tag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGitHubClient_github_GetReleaseByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleaseByTag'
type MockGitHubClient_github_GetReleaseByTag_Call struct {
	*mock.Call
}

// GetReleaseByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - tag string
func (_e *MockGitHubClient_github_Expecter) GetReleaseByTag(ctx interface{}, owner interface{}, repo interface{}, tag interface{}) *MockGitHubClient_github_GetReleaseByTag_Call {
	return &MockGitHubClient_github_GetReleaseByTag_Call{Call: _e.mock.On("GetReleaseByTag", ctx, owner, repo, tag)}
}

func (_c *MockGitHubClient_github_GetReleaseByTag_Call) Run(run func(ctx context.Context, owner string, repo string, tag string)) *MockGitHubClient_github_GetReleaseByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGitHubClient_github_GetReleaseByTag_Call) Return(_a0 *github.RepositoryRelease, _a1 *github.Response, _a2 error) *MockGitHubClient_github_GetReleaseByTag_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGitHubClient_github_GetReleaseByTag_Call) RunAndReturn(run func(context.Context, string, string, string) (*github.RepositoryRelease, *github.Response, error)) *MockGitHubClient_github_GetReleaseByTag_Call {
	_c.Call.Return(run)
	return _c
}

// License provides a mock function with given fields: ctx, owner, repo
func (_m *MockGitHubClient_github) License(ctx context.Context, owner string, repo string) (*github.RepositoryLicense, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo)

	if len(ret) == 0 {
		panic("no return value specified for License")
	}

	var r0 *github.RepositoryLicense
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*github.RepositoryLicense, *github.Response, error)); ok {
		return rf(ctx, owner, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.RepositoryLicense); ok {
		r0 = rf(ctx, owner, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryLicense)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, repo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, owner, repo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGitHubClient_github_License_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'License'
type MockGitHubClient_github_License_Call struct {
	*mock.Call
}

// License is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
func (_e *MockGitHubClient_github_Expecter) License(ctx interface{}, owner interface{}, repo interface{}) *MockGitHubClient_github_License_Call {
	return &MockGitHubClient_github_License_Call{Call: _e.mock.On("License", ctx, owner, repo)}
}

func (_c *MockGitHubClient_github_License_Call) Run(run func(ctx context.Context, owner string, repo string)) *MockGitHubClient_github_License_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGitHubClient_github_License_Call) Return(_a0 *github.RepositoryLicense, _a1 *github.Response, _a2 error) *MockGitHubClient_github_License_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockGitHubClient_github_License_Call) RunAndReturn(run func(context.Context, string, string) (*github.RepositoryLicense, *github.Response, error)) *MockGitHubClient_github_License_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitHubClient_github creates a new instance of MockGitHubClient_github. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitHubClient_github(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitHubClient_github {
	mock := &MockGitHubClient_github{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
