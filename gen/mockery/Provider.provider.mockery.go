// Code generated by mockery v2.51.0. DO NOT EDIT.

package mockery

import (
	context "context"

	config "github.com/walteh/copyrc/pkg/config"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockProvider_provider is an autogenerated mock type for the Provider type
type MockProvider_provider struct {
	mock.Mock
}

type MockProvider_provider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider_provider) EXPECT() *MockProvider_provider_Expecter {
	return &MockProvider_provider_Expecter{mock: &_m.Mock}
}

// GetArchiveURL provides a mock function with given fields: ctx, args
func (_m *MockProvider_provider) GetArchiveURL(ctx context.Context, args config.ProviderArgs) (string, error) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetArchiveURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs) (string, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs) string); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.ProviderArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_provider_GetArchiveURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArchiveURL'
type MockProvider_provider_GetArchiveURL_Call struct {
	*mock.Call
}

// GetArchiveURL is a helper method to define mock.On call
//   - ctx context.Context
//   - args config.ProviderArgs
func (_e *MockProvider_provider_Expecter) GetArchiveURL(ctx interface{}, args interface{}) *MockProvider_provider_GetArchiveURL_Call {
	return &MockProvider_provider_GetArchiveURL_Call{Call: _e.mock.On("GetArchiveURL", ctx, args)}
}

func (_c *MockProvider_provider_GetArchiveURL_Call) Run(run func(ctx context.Context, args config.ProviderArgs)) *MockProvider_provider_GetArchiveURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.ProviderArgs))
	})
	return _c
}

func (_c *MockProvider_provider_GetArchiveURL_Call) Return(_a0 string, _a1 error) *MockProvider_provider_GetArchiveURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_provider_GetArchiveURL_Call) RunAndReturn(run func(context.Context, config.ProviderArgs) (string, error)) *MockProvider_provider_GetArchiveURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommitHash provides a mock function with given fields: ctx, args
func (_m *MockProvider_provider) GetCommitHash(ctx context.Context, args config.ProviderArgs) (string, error) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitHash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs) (string, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs) string); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.ProviderArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_provider_GetCommitHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitHash'
type MockProvider_provider_GetCommitHash_Call struct {
	*mock.Call
}

// GetCommitHash is a helper method to define mock.On call
//   - ctx context.Context
//   - args config.ProviderArgs
func (_e *MockProvider_provider_Expecter) GetCommitHash(ctx interface{}, args interface{}) *MockProvider_provider_GetCommitHash_Call {
	return &MockProvider_provider_GetCommitHash_Call{Call: _e.mock.On("GetCommitHash", ctx, args)}
}

func (_c *MockProvider_provider_GetCommitHash_Call) Run(run func(ctx context.Context, args config.ProviderArgs)) *MockProvider_provider_GetCommitHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.ProviderArgs))
	})
	return _c
}

func (_c *MockProvider_provider_GetCommitHash_Call) Return(_a0 string, _a1 error) *MockProvider_provider_GetCommitHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_provider_GetCommitHash_Call) RunAndReturn(run func(context.Context, config.ProviderArgs) (string, error)) *MockProvider_provider_GetCommitHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetFile provides a mock function with given fields: ctx, args, path
func (_m *MockProvider_provider) GetFile(ctx context.Context, args config.ProviderArgs, path string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, args, path)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs, string) (io.ReadCloser, error)); ok {
		return rf(ctx, args, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs, string) io.ReadCloser); ok {
		r0 = rf(ctx, args, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.ProviderArgs, string) error); ok {
		r1 = rf(ctx, args, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_provider_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type MockProvider_provider_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - ctx context.Context
//   - args config.ProviderArgs
//   - path string
func (_e *MockProvider_provider_Expecter) GetFile(ctx interface{}, args interface{}, path interface{}) *MockProvider_provider_GetFile_Call {
	return &MockProvider_provider_GetFile_Call{Call: _e.mock.On("GetFile", ctx, args, path)}
}

func (_c *MockProvider_provider_GetFile_Call) Run(run func(ctx context.Context, args config.ProviderArgs, path string)) *MockProvider_provider_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.ProviderArgs), args[2].(string))
	})
	return _c
}

func (_c *MockProvider_provider_GetFile_Call) Return(_a0 io.ReadCloser, _a1 error) *MockProvider_provider_GetFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_provider_GetFile_Call) RunAndReturn(run func(context.Context, config.ProviderArgs, string) (io.ReadCloser, error)) *MockProvider_provider_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermalink provides a mock function with given fields: ctx, args, commitHash, file
func (_m *MockProvider_provider) GetPermalink(ctx context.Context, args config.ProviderArgs, commitHash string, file string) (string, error) {
	ret := _m.Called(ctx, args, commitHash, file)

	if len(ret) == 0 {
		panic("no return value specified for GetPermalink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs, string, string) (string, error)); ok {
		return rf(ctx, args, commitHash, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs, string, string) string); ok {
		r0 = rf(ctx, args, commitHash, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.ProviderArgs, string, string) error); ok {
		r1 = rf(ctx, args, commitHash, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_provider_GetPermalink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermalink'
type MockProvider_provider_GetPermalink_Call struct {
	*mock.Call
}

// GetPermalink is a helper method to define mock.On call
//   - ctx context.Context
//   - args config.ProviderArgs
//   - commitHash string
//   - file string
func (_e *MockProvider_provider_Expecter) GetPermalink(ctx interface{}, args interface{}, commitHash interface{}, file interface{}) *MockProvider_provider_GetPermalink_Call {
	return &MockProvider_provider_GetPermalink_Call{Call: _e.mock.On("GetPermalink", ctx, args, commitHash, file)}
}

func (_c *MockProvider_provider_GetPermalink_Call) Run(run func(ctx context.Context, args config.ProviderArgs, commitHash string, file string)) *MockProvider_provider_GetPermalink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.ProviderArgs), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockProvider_provider_GetPermalink_Call) Return(_a0 string, _a1 error) *MockProvider_provider_GetPermalink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_provider_GetPermalink_Call) RunAndReturn(run func(context.Context, config.ProviderArgs, string, string) (string, error)) *MockProvider_provider_GetPermalink_Call {
	_c.Call.Return(run)
	return _c
}

// GetSourceInfo provides a mock function with given fields: ctx, args, commitHash
func (_m *MockProvider_provider) GetSourceInfo(ctx context.Context, args config.ProviderArgs, commitHash string) (string, error) {
	ret := _m.Called(ctx, args, commitHash)

	if len(ret) == 0 {
		panic("no return value specified for GetSourceInfo")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs, string) (string, error)); ok {
		return rf(ctx, args, commitHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs, string) string); ok {
		r0 = rf(ctx, args, commitHash)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.ProviderArgs, string) error); ok {
		r1 = rf(ctx, args, commitHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_provider_GetSourceInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourceInfo'
type MockProvider_provider_GetSourceInfo_Call struct {
	*mock.Call
}

// GetSourceInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - args config.ProviderArgs
//   - commitHash string
func (_e *MockProvider_provider_Expecter) GetSourceInfo(ctx interface{}, args interface{}, commitHash interface{}) *MockProvider_provider_GetSourceInfo_Call {
	return &MockProvider_provider_GetSourceInfo_Call{Call: _e.mock.On("GetSourceInfo", ctx, args, commitHash)}
}

func (_c *MockProvider_provider_GetSourceInfo_Call) Run(run func(ctx context.Context, args config.ProviderArgs, commitHash string)) *MockProvider_provider_GetSourceInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.ProviderArgs), args[2].(string))
	})
	return _c
}

func (_c *MockProvider_provider_GetSourceInfo_Call) Return(_a0 string, _a1 error) *MockProvider_provider_GetSourceInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_provider_GetSourceInfo_Call) RunAndReturn(run func(context.Context, config.ProviderArgs, string) (string, error)) *MockProvider_provider_GetSourceInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function with given fields: ctx, args
func (_m *MockProvider_provider) ListFiles(ctx context.Context, args config.ProviderArgs) ([]string, error) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListFiles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs) ([]string, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.ProviderArgs) []string); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.ProviderArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_provider_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type MockProvider_provider_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - args config.ProviderArgs
func (_e *MockProvider_provider_Expecter) ListFiles(ctx interface{}, args interface{}) *MockProvider_provider_ListFiles_Call {
	return &MockProvider_provider_ListFiles_Call{Call: _e.mock.On("ListFiles", ctx, args)}
}

func (_c *MockProvider_provider_ListFiles_Call) Run(run func(ctx context.Context, args config.ProviderArgs)) *MockProvider_provider_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.ProviderArgs))
	})
	return _c
}

func (_c *MockProvider_provider_ListFiles_Call) Return(_a0 []string, _a1 error) *MockProvider_provider_ListFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_provider_ListFiles_Call) RunAndReturn(run func(context.Context, config.ProviderArgs) ([]string, error)) *MockProvider_provider_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider_provider creates a new instance of MockProvider_provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider_provider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider_provider {
	mock := &MockProvider_provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
