// Code generated by mockery v2.51.0. DO NOT EDIT.

package mockery

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	remote "github.com/walteh/copyrc/pkg/remote"
)

// MockRawTextFile_remote is an autogenerated mock type for the RawTextFile type
type MockRawTextFile_remote struct {
	mock.Mock
}

type MockRawTextFile_remote_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRawTextFile_remote) EXPECT() *MockRawTextFile_remote_Expecter {
	return &MockRawTextFile_remote_Expecter{mock: &_m.Mock}
}

// GetContent provides a mock function with given fields: ctx
func (_m *MockRawTextFile_remote) GetContent(ctx context.Context) (io.ReadCloser, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetContent")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (io.ReadCloser, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) io.ReadCloser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRawTextFile_remote_GetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContent'
type MockRawTextFile_remote_GetContent_Call struct {
	*mock.Call
}

// GetContent is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRawTextFile_remote_Expecter) GetContent(ctx interface{}) *MockRawTextFile_remote_GetContent_Call {
	return &MockRawTextFile_remote_GetContent_Call{Call: _e.mock.On("GetContent", ctx)}
}

func (_c *MockRawTextFile_remote_GetContent_Call) Run(run func(ctx context.Context)) *MockRawTextFile_remote_GetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRawTextFile_remote_GetContent_Call) Return(_a0 io.ReadCloser, _a1 error) *MockRawTextFile_remote_GetContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRawTextFile_remote_GetContent_Call) RunAndReturn(run func(context.Context) (io.ReadCloser, error)) *MockRawTextFile_remote_GetContent_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with no fields
func (_m *MockRawTextFile_remote) Path() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRawTextFile_remote_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockRawTextFile_remote_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockRawTextFile_remote_Expecter) Path() *MockRawTextFile_remote_Path_Call {
	return &MockRawTextFile_remote_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockRawTextFile_remote_Path_Call) Run(run func()) *MockRawTextFile_remote_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRawTextFile_remote_Path_Call) Return(_a0 string) *MockRawTextFile_remote_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRawTextFile_remote_Path_Call) RunAndReturn(run func() string) *MockRawTextFile_remote_Path_Call {
	_c.Call.Return(run)
	return _c
}

// RawTextPermalink provides a mock function with no fields
func (_m *MockRawTextFile_remote) RawTextPermalink() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RawTextPermalink")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRawTextFile_remote_RawTextPermalink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawTextPermalink'
type MockRawTextFile_remote_RawTextPermalink_Call struct {
	*mock.Call
}

// RawTextPermalink is a helper method to define mock.On call
func (_e *MockRawTextFile_remote_Expecter) RawTextPermalink() *MockRawTextFile_remote_RawTextPermalink_Call {
	return &MockRawTextFile_remote_RawTextPermalink_Call{Call: _e.mock.On("RawTextPermalink")}
}

func (_c *MockRawTextFile_remote_RawTextPermalink_Call) Run(run func()) *MockRawTextFile_remote_RawTextPermalink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRawTextFile_remote_RawTextPermalink_Call) Return(_a0 string) *MockRawTextFile_remote_RawTextPermalink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRawTextFile_remote_RawTextPermalink_Call) RunAndReturn(run func() string) *MockRawTextFile_remote_RawTextPermalink_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with no fields
func (_m *MockRawTextFile_remote) Release() remote.Release {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 remote.Release
	if rf, ok := ret.Get(0).(func() remote.Release); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(remote.Release)
		}
	}

	return r0
}

// MockRawTextFile_remote_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockRawTextFile_remote_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
func (_e *MockRawTextFile_remote_Expecter) Release() *MockRawTextFile_remote_Release_Call {
	return &MockRawTextFile_remote_Release_Call{Call: _e.mock.On("Release")}
}

func (_c *MockRawTextFile_remote_Release_Call) Run(run func()) *MockRawTextFile_remote_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRawTextFile_remote_Release_Call) Return(_a0 remote.Release) *MockRawTextFile_remote_Release_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRawTextFile_remote_Release_Call) RunAndReturn(run func() remote.Release) *MockRawTextFile_remote_Release_Call {
	_c.Call.Return(run)
	return _c
}

// WebViewPermalink provides a mock function with no fields
func (_m *MockRawTextFile_remote) WebViewPermalink() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WebViewPermalink")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRawTextFile_remote_WebViewPermalink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WebViewPermalink'
type MockRawTextFile_remote_WebViewPermalink_Call struct {
	*mock.Call
}

// WebViewPermalink is a helper method to define mock.On call
func (_e *MockRawTextFile_remote_Expecter) WebViewPermalink() *MockRawTextFile_remote_WebViewPermalink_Call {
	return &MockRawTextFile_remote_WebViewPermalink_Call{Call: _e.mock.On("WebViewPermalink")}
}

func (_c *MockRawTextFile_remote_WebViewPermalink_Call) Run(run func()) *MockRawTextFile_remote_WebViewPermalink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRawTextFile_remote_WebViewPermalink_Call) Return(_a0 string) *MockRawTextFile_remote_WebViewPermalink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRawTextFile_remote_WebViewPermalink_Call) RunAndReturn(run func() string) *MockRawTextFile_remote_WebViewPermalink_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRawTextFile_remote creates a new instance of MockRawTextFile_remote. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRawTextFile_remote(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRawTextFile_remote {
	mock := &MockRawTextFile_remote{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
