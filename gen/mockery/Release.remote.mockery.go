// Code generated by mockery v2.51.0. DO NOT EDIT.

package mockery

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	remote "github.com/walteh/copyrc/cmd/copyrc-next/pkg/remote"
)

// MockRelease_remote is an autogenerated mock type for the Release type
type MockRelease_remote struct {
	mock.Mock
}

type MockRelease_remote_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRelease_remote) EXPECT() *MockRelease_remote_Expecter {
	return &MockRelease_remote_Expecter{mock: &_m.Mock}
}

// GetFileAtPath provides a mock function with given fields: ctx, path
func (_m *MockRelease_remote) GetFileAtPath(ctx context.Context, path string) (remote.RawTextFile, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for GetFileAtPath")
	}

	var r0 remote.RawTextFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (remote.RawTextFile, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) remote.RawTextFile); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(remote.RawTextFile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRelease_remote_GetFileAtPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileAtPath'
type MockRelease_remote_GetFileAtPath_Call struct {
	*mock.Call
}

// GetFileAtPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockRelease_remote_Expecter) GetFileAtPath(ctx interface{}, path interface{}) *MockRelease_remote_GetFileAtPath_Call {
	return &MockRelease_remote_GetFileAtPath_Call{Call: _e.mock.On("GetFileAtPath", ctx, path)}
}

func (_c *MockRelease_remote_GetFileAtPath_Call) Run(run func(ctx context.Context, path string)) *MockRelease_remote_GetFileAtPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRelease_remote_GetFileAtPath_Call) Return(_a0 remote.RawTextFile, _a1 error) *MockRelease_remote_GetFileAtPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRelease_remote_GetFileAtPath_Call) RunAndReturn(run func(context.Context, string) (remote.RawTextFile, error)) *MockRelease_remote_GetFileAtPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicense provides a mock function with given fields: ctx
func (_m *MockRelease_remote) GetLicense(ctx context.Context) (remote.License, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLicense")
	}

	var r0 remote.License
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (remote.License, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) remote.License); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(remote.License)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRelease_remote_GetLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicense'
type MockRelease_remote_GetLicense_Call struct {
	*mock.Call
}

// GetLicense is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRelease_remote_Expecter) GetLicense(ctx interface{}) *MockRelease_remote_GetLicense_Call {
	return &MockRelease_remote_GetLicense_Call{Call: _e.mock.On("GetLicense", ctx)}
}

func (_c *MockRelease_remote_GetLicense_Call) Run(run func(ctx context.Context)) *MockRelease_remote_GetLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRelease_remote_GetLicense_Call) Return(_a0 remote.License, _a1 error) *MockRelease_remote_GetLicense_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRelease_remote_GetLicense_Call) RunAndReturn(run func(context.Context) (remote.License, error)) *MockRelease_remote_GetLicense_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseAtPath provides a mock function with given fields: ctx, path
func (_m *MockRelease_remote) GetLicenseAtPath(ctx context.Context, path string) (remote.License, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseAtPath")
	}

	var r0 remote.License
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (remote.License, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) remote.License); ok {
		r0 = rf(ctx, path)
	} else {
		r0 = ret.Get(0).(remote.License)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRelease_remote_GetLicenseAtPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseAtPath'
type MockRelease_remote_GetLicenseAtPath_Call struct {
	*mock.Call
}

// GetLicenseAtPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockRelease_remote_Expecter) GetLicenseAtPath(ctx interface{}, path interface{}) *MockRelease_remote_GetLicenseAtPath_Call {
	return &MockRelease_remote_GetLicenseAtPath_Call{Call: _e.mock.On("GetLicenseAtPath", ctx, path)}
}

func (_c *MockRelease_remote_GetLicenseAtPath_Call) Run(run func(ctx context.Context, path string)) *MockRelease_remote_GetLicenseAtPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRelease_remote_GetLicenseAtPath_Call) Return(_a0 remote.License, _a1 error) *MockRelease_remote_GetLicenseAtPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRelease_remote_GetLicenseAtPath_Call) RunAndReturn(run func(context.Context, string) (remote.License, error)) *MockRelease_remote_GetLicenseAtPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetTarball provides a mock function with given fields: ctx
func (_m *MockRelease_remote) GetTarball(ctx context.Context) (io.ReadCloser, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTarball")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (io.ReadCloser, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) io.ReadCloser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRelease_remote_GetTarball_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTarball'
type MockRelease_remote_GetTarball_Call struct {
	*mock.Call
}

// GetTarball is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRelease_remote_Expecter) GetTarball(ctx interface{}) *MockRelease_remote_GetTarball_Call {
	return &MockRelease_remote_GetTarball_Call{Call: _e.mock.On("GetTarball", ctx)}
}

func (_c *MockRelease_remote_GetTarball_Call) Run(run func(ctx context.Context)) *MockRelease_remote_GetTarball_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRelease_remote_GetTarball_Call) Return(_a0 io.ReadCloser, _a1 error) *MockRelease_remote_GetTarball_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRelease_remote_GetTarball_Call) RunAndReturn(run func(context.Context) (io.ReadCloser, error)) *MockRelease_remote_GetTarball_Call {
	_c.Call.Return(run)
	return _c
}

// ListFilesAtPath provides a mock function with given fields: ctx, path
func (_m *MockRelease_remote) ListFilesAtPath(ctx context.Context, path string) ([]remote.RawTextFile, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for ListFilesAtPath")
	}

	var r0 []remote.RawTextFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]remote.RawTextFile, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []remote.RawTextFile); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]remote.RawTextFile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRelease_remote_ListFilesAtPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFilesAtPath'
type MockRelease_remote_ListFilesAtPath_Call struct {
	*mock.Call
}

// ListFilesAtPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockRelease_remote_Expecter) ListFilesAtPath(ctx interface{}, path interface{}) *MockRelease_remote_ListFilesAtPath_Call {
	return &MockRelease_remote_ListFilesAtPath_Call{Call: _e.mock.On("ListFilesAtPath", ctx, path)}
}

func (_c *MockRelease_remote_ListFilesAtPath_Call) Run(run func(ctx context.Context, path string)) *MockRelease_remote_ListFilesAtPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRelease_remote_ListFilesAtPath_Call) Return(_a0 []remote.RawTextFile, _a1 error) *MockRelease_remote_ListFilesAtPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRelease_remote_ListFilesAtPath_Call) RunAndReturn(run func(context.Context, string) ([]remote.RawTextFile, error)) *MockRelease_remote_ListFilesAtPath_Call {
	_c.Call.Return(run)
	return _c
}

// Ref provides a mock function with no fields
func (_m *MockRelease_remote) Ref() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ref")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRelease_remote_Ref_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ref'
type MockRelease_remote_Ref_Call struct {
	*mock.Call
}

// Ref is a helper method to define mock.On call
func (_e *MockRelease_remote_Expecter) Ref() *MockRelease_remote_Ref_Call {
	return &MockRelease_remote_Ref_Call{Call: _e.mock.On("Ref")}
}

func (_c *MockRelease_remote_Ref_Call) Run(run func()) *MockRelease_remote_Ref_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRelease_remote_Ref_Call) Return(_a0 string) *MockRelease_remote_Ref_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRelease_remote_Ref_Call) RunAndReturn(run func() string) *MockRelease_remote_Ref_Call {
	_c.Call.Return(run)
	return _c
}

// RefHash provides a mock function with no fields
func (_m *MockRelease_remote) RefHash() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RefHash")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRelease_remote_RefHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefHash'
type MockRelease_remote_RefHash_Call struct {
	*mock.Call
}

// RefHash is a helper method to define mock.On call
func (_e *MockRelease_remote_Expecter) RefHash() *MockRelease_remote_RefHash_Call {
	return &MockRelease_remote_RefHash_Call{Call: _e.mock.On("RefHash")}
}

func (_c *MockRelease_remote_RefHash_Call) Run(run func()) *MockRelease_remote_RefHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRelease_remote_RefHash_Call) Return(_a0 string) *MockRelease_remote_RefHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRelease_remote_RefHash_Call) RunAndReturn(run func() string) *MockRelease_remote_RefHash_Call {
	_c.Call.Return(run)
	return _c
}

// Repository provides a mock function with no fields
func (_m *MockRelease_remote) Repository() remote.Repository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Repository")
	}

	var r0 remote.Repository
	if rf, ok := ret.Get(0).(func() remote.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(remote.Repository)
		}
	}

	return r0
}

// MockRelease_remote_Repository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Repository'
type MockRelease_remote_Repository_Call struct {
	*mock.Call
}

// Repository is a helper method to define mock.On call
func (_e *MockRelease_remote_Expecter) Repository() *MockRelease_remote_Repository_Call {
	return &MockRelease_remote_Repository_Call{Call: _e.mock.On("Repository")}
}

func (_c *MockRelease_remote_Repository_Call) Run(run func()) *MockRelease_remote_Repository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRelease_remote_Repository_Call) Return(_a0 remote.Repository) *MockRelease_remote_Repository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRelease_remote_Repository_Call) RunAndReturn(run func() remote.Repository) *MockRelease_remote_Repository_Call {
	_c.Call.Return(run)
	return _c
}

// WebPermalink provides a mock function with no fields
func (_m *MockRelease_remote) WebPermalink() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WebPermalink")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRelease_remote_WebPermalink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WebPermalink'
type MockRelease_remote_WebPermalink_Call struct {
	*mock.Call
}

// WebPermalink is a helper method to define mock.On call
func (_e *MockRelease_remote_Expecter) WebPermalink() *MockRelease_remote_WebPermalink_Call {
	return &MockRelease_remote_WebPermalink_Call{Call: _e.mock.On("WebPermalink")}
}

func (_c *MockRelease_remote_WebPermalink_Call) Run(run func()) *MockRelease_remote_WebPermalink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRelease_remote_WebPermalink_Call) Return(_a0 string) *MockRelease_remote_WebPermalink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRelease_remote_WebPermalink_Call) RunAndReturn(run func() string) *MockRelease_remote_WebPermalink_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRelease_remote creates a new instance of MockRelease_remote. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRelease_remote(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRelease_remote {
	mock := &MockRelease_remote{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
