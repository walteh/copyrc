// Code generated by mockery v2.51.0. DO NOT EDIT.

package mockery

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	remote "github.com/walteh/copyrc/pkg/remote"

	state "github.com/walteh/copyrc/pkg/state"
)

// MockStateManager_state is an autogenerated mock type for the StateManager type
type MockStateManager_state struct {
	mock.Mock
}

type MockStateManager_state_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateManager_state) EXPECT() *MockStateManager_state_Expecter {
	return &MockStateManager_state_Expecter{mock: &_m.Mock}
}

// CleanupOrphanedFiles provides a mock function with given fields: ctx
func (_m *MockStateManager_state) CleanupOrphanedFiles(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CleanupOrphanedFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateManager_state_CleanupOrphanedFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupOrphanedFiles'
type MockStateManager_state_CleanupOrphanedFiles_Call struct {
	*mock.Call
}

// CleanupOrphanedFiles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStateManager_state_Expecter) CleanupOrphanedFiles(ctx interface{}) *MockStateManager_state_CleanupOrphanedFiles_Call {
	return &MockStateManager_state_CleanupOrphanedFiles_Call{Call: _e.mock.On("CleanupOrphanedFiles", ctx)}
}

func (_c *MockStateManager_state_CleanupOrphanedFiles_Call) Run(run func(ctx context.Context)) *MockStateManager_state_CleanupOrphanedFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStateManager_state_CleanupOrphanedFiles_Call) Return(_a0 error) *MockStateManager_state_CleanupOrphanedFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateManager_state_CleanupOrphanedFiles_Call) RunAndReturn(run func(context.Context) error) *MockStateManager_state_CleanupOrphanedFiles_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigHash provides a mock function with no fields
func (_m *MockStateManager_state) ConfigHash() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConfigHash")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockStateManager_state_ConfigHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigHash'
type MockStateManager_state_ConfigHash_Call struct {
	*mock.Call
}

// ConfigHash is a helper method to define mock.On call
func (_e *MockStateManager_state_Expecter) ConfigHash() *MockStateManager_state_ConfigHash_Call {
	return &MockStateManager_state_ConfigHash_Call{Call: _e.mock.On("ConfigHash")}
}

func (_c *MockStateManager_state_ConfigHash_Call) Run(run func()) *MockStateManager_state_ConfigHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateManager_state_ConfigHash_Call) Return(_a0 string) *MockStateManager_state_ConfigHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateManager_state_ConfigHash_Call) RunAndReturn(run func() string) *MockStateManager_state_ConfigHash_Call {
	_c.Call.Return(run)
	return _c
}

// Dir provides a mock function with no fields
func (_m *MockStateManager_state) Dir() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dir")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockStateManager_state_Dir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dir'
type MockStateManager_state_Dir_Call struct {
	*mock.Call
}

// Dir is a helper method to define mock.On call
func (_e *MockStateManager_state_Expecter) Dir() *MockStateManager_state_Dir_Call {
	return &MockStateManager_state_Dir_Call{Call: _e.mock.On("Dir")}
}

func (_c *MockStateManager_state_Dir_Call) Run(run func()) *MockStateManager_state_Dir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateManager_state_Dir_Call) Return(_a0 string) *MockStateManager_state_Dir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateManager_state_Dir_Call) RunAndReturn(run func() string) *MockStateManager_state_Dir_Call {
	_c.Call.Return(run)
	return _c
}

// IsConsistent provides a mock function with given fields: ctx
func (_m *MockStateManager_state) IsConsistent(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsConsistent")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateManager_state_IsConsistent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConsistent'
type MockStateManager_state_IsConsistent_Call struct {
	*mock.Call
}

// IsConsistent is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStateManager_state_Expecter) IsConsistent(ctx interface{}) *MockStateManager_state_IsConsistent_Call {
	return &MockStateManager_state_IsConsistent_Call{Call: _e.mock.On("IsConsistent", ctx)}
}

func (_c *MockStateManager_state_IsConsistent_Call) Run(run func(ctx context.Context)) *MockStateManager_state_IsConsistent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStateManager_state_IsConsistent_Call) Return(_a0 bool, _a1 error) *MockStateManager_state_IsConsistent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateManager_state_IsConsistent_Call) RunAndReturn(run func(context.Context) (bool, error)) *MockStateManager_state_IsConsistent_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: ctx
func (_m *MockStateManager_state) Load(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateManager_state_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockStateManager_state_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStateManager_state_Expecter) Load(ctx interface{}) *MockStateManager_state_Load_Call {
	return &MockStateManager_state_Load_Call{Call: _e.mock.On("Load", ctx)}
}

func (_c *MockStateManager_state_Load_Call) Run(run func(ctx context.Context)) *MockStateManager_state_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStateManager_state_Load_Call) Return(_a0 error) *MockStateManager_state_Load_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateManager_state_Load_Call) RunAndReturn(run func(context.Context) error) *MockStateManager_state_Load_Call {
	_c.Call.Return(run)
	return _c
}

// PutRemoteTextFile provides a mock function with given fields: ctx, file, localPath
func (_m *MockStateManager_state) PutRemoteTextFile(ctx context.Context, file remote.RawTextFile, localPath string) (*state.RemoteTextFile, error) {
	ret := _m.Called(ctx, file, localPath)

	if len(ret) == 0 {
		panic("no return value specified for PutRemoteTextFile")
	}

	var r0 *state.RemoteTextFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, remote.RawTextFile, string) (*state.RemoteTextFile, error)); ok {
		return rf(ctx, file, localPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, remote.RawTextFile, string) *state.RemoteTextFile); ok {
		r0 = rf(ctx, file, localPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.RemoteTextFile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, remote.RawTextFile, string) error); ok {
		r1 = rf(ctx, file, localPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateManager_state_PutRemoteTextFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRemoteTextFile'
type MockStateManager_state_PutRemoteTextFile_Call struct {
	*mock.Call
}

// PutRemoteTextFile is a helper method to define mock.On call
//   - ctx context.Context
//   - file remote.RawTextFile
//   - localPath string
func (_e *MockStateManager_state_Expecter) PutRemoteTextFile(ctx interface{}, file interface{}, localPath interface{}) *MockStateManager_state_PutRemoteTextFile_Call {
	return &MockStateManager_state_PutRemoteTextFile_Call{Call: _e.mock.On("PutRemoteTextFile", ctx, file, localPath)}
}

func (_c *MockStateManager_state_PutRemoteTextFile_Call) Run(run func(ctx context.Context, file remote.RawTextFile, localPath string)) *MockStateManager_state_PutRemoteTextFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(remote.RawTextFile), args[2].(string))
	})
	return _c
}

func (_c *MockStateManager_state_PutRemoteTextFile_Call) Return(_a0 *state.RemoteTextFile, _a1 error) *MockStateManager_state_PutRemoteTextFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateManager_state_PutRemoteTextFile_Call) RunAndReturn(run func(context.Context, remote.RawTextFile, string) (*state.RemoteTextFile, error)) *MockStateManager_state_PutRemoteTextFile_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields: ctx
func (_m *MockStateManager_state) Reset(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateManager_state_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockStateManager_state_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStateManager_state_Expecter) Reset(ctx interface{}) *MockStateManager_state_Reset_Call {
	return &MockStateManager_state_Reset_Call{Call: _e.mock.On("Reset", ctx)}
}

func (_c *MockStateManager_state_Reset_Call) Run(run func(ctx context.Context)) *MockStateManager_state_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStateManager_state_Reset_Call) Return(_a0 error) *MockStateManager_state_Reset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateManager_state_Reset_Call) RunAndReturn(run func(context.Context) error) *MockStateManager_state_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx
func (_m *MockStateManager_state) Save(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateManager_state_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockStateManager_state_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStateManager_state_Expecter) Save(ctx interface{}) *MockStateManager_state_Save_Call {
	return &MockStateManager_state_Save_Call{Call: _e.mock.On("Save", ctx)}
}

func (_c *MockStateManager_state_Save_Call) Run(run func(ctx context.Context)) *MockStateManager_state_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStateManager_state_Save_Call) Return(_a0 error) *MockStateManager_state_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateManager_state_Save_Call) RunAndReturn(run func(context.Context) error) *MockStateManager_state_Save_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateLocalState provides a mock function with given fields: ctx
func (_m *MockStateManager_state) ValidateLocalState(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ValidateLocalState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateManager_state_ValidateLocalState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateLocalState'
type MockStateManager_state_ValidateLocalState_Call struct {
	*mock.Call
}

// ValidateLocalState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStateManager_state_Expecter) ValidateLocalState(ctx interface{}) *MockStateManager_state_ValidateLocalState_Call {
	return &MockStateManager_state_ValidateLocalState_Call{Call: _e.mock.On("ValidateLocalState", ctx)}
}

func (_c *MockStateManager_state_ValidateLocalState_Call) Run(run func(ctx context.Context)) *MockStateManager_state_ValidateLocalState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStateManager_state_ValidateLocalState_Call) Return(_a0 error) *MockStateManager_state_ValidateLocalState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateManager_state_ValidateLocalState_Call) RunAndReturn(run func(context.Context) error) *MockStateManager_state_ValidateLocalState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStateManager_state creates a new instance of MockStateManager_state. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateManager_state(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateManager_state {
	mock := &MockStateManager_state{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
